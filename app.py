import os
import re
import requests
import logging
import time
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
from markdownify import markdownify as md
import markdown

app = Flask(__name__, static_folder='static', template_folder='templates')
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyBry_e6sHvUPqTu0jmvR9uCa50s1tH6GtM")
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"

# –°–ø–∏—Å–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
NON_FOOD_ITEMS = [
    "–ø–ª–∞—Å—Ç–∏–∫", "–º–µ—Ç–∞–ª–ª", "—Å—Ç–µ–∫–ª–æ", "–±—É–º–∞–≥–∞", "–¥–µ—Ä–µ–≤–æ", "–∫–∞–º–µ–Ω—å",
    "—Ö–∏–º–∏–∫–∞—Ç—ã", "—è–¥", "—Ç–æ–∫—Å–∏–Ω—ã", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "–º—ã–ª–æ", "–∫—Ä–∞—Å–∫–∞",
    "–±–µ–Ω–∑–∏–Ω", "–∫–ª–µ–π", "—Ü–µ–º–µ–Ω—Ç", "–ø–µ—Å–æ–∫", "—Ç–∫–∞–Ω—å", "—Ä–µ–∑–∏–Ω–∞"
]

DANGEROUS_ITEMS = [
    "—è–¥–æ–≤–∏—Ç—ã–π", "—Ç–æ–∫—Å–∏—á–Ω—ã–π", "–Ω–µ—Å—ä–µ–¥–æ–±–Ω—ã–π", "–∏—Å–ø–æ—Ä—á–µ–Ω–Ω—ã–π",
    "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π", "–≥–Ω–∏–ª–æ–π", "–ø–ª–µ—Å–µ–Ω—å", "–∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–π"
]

COMMON_FOOD_ITEMS = [
    "—è–π—Ü–æ", "–º–æ–ª–æ–∫–æ", "–º—É–∫–∞", "—Å–∞—Ö–∞—Ä", "—Å–æ–ª—å", "–º–∞—Å–ª–æ", "–∫—É—Ä–∏—Ü–∞", 
    "–≥–æ–≤—è–¥–∏–Ω–∞", "—Å–≤–∏–Ω–∏–Ω–∞", "—Ä—ã–±–∞", "–ª—É–∫", "–º–æ—Ä–∫–æ–≤—å", "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å",
    "–ø–æ–º–∏–¥–æ—Ä", "–æ–≥—É—Ä–µ—Ü", "–ø–µ—Ä–µ—Ü", "—Ä–∏—Å", "–≥—Ä–µ—á–∫–∞", "–º–∞–∫–∞—Ä–æ–Ω—ã", "—Å—ã—Ä",
    "—Ç–≤–æ—Ä–æ–≥", "—Å–º–µ—Ç–∞–Ω–∞", "–∫–µ—Ñ–∏—Ä", "–π–æ–≥—É—Ä—Ç", "—Ñ—Ä—É–∫—Ç", "–æ–≤–æ—â", "–∑–µ–ª–µ–Ω—å"
]

UNCOMMON_FOOD_ITEMS = [
    "—Å—Ç—Ä–∞—É—Å–∏–Ω–æ–µ —è–π—Ü–æ", "–ø–µ—Ä–µ–ø–µ–ª–∏–Ω–æ–µ —è–π—Ü–æ", "–∫–æ–∑—å–µ –º–æ–ª–æ–∫–æ", 
    "—Å–æ–µ–≤–æ–µ –º–æ–ª–æ–∫–æ", "–º–∏–Ω–¥–∞–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ", "–∫–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ",
    "–Ω—É—Ç–æ–≤–∞—è –º—É–∫–∞", "–ª—å–Ω—è–Ω–∞—è –º—É–∫–∞", "–∫–æ–∫–æ—Å–æ–≤—ã–π —Å–∞—Ö–∞—Ä", "—Å—Ç–µ–≤–∏—è"
]

def is_valid_ingredient(ingredient):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–º –ø–∏—â–µ–≤—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º"""
    ingredient_lower = ingredient.lower()
    
    if any(non_food in ingredient_lower for non_food in NON_FOOD_ITEMS):
        return False
    
    if any(danger in ingredient_lower for danger in DANGEROUS_ITEMS):
        return False
    
    if len(ingredient) < 2 or len(ingredient) > 50:
        return False
    
    if re.search(r'\d', ingredient) and not re.search(r'^\d+[.,]?\d*\s*[a-zA-Z–∞-—è–ê-–Ø]+$', ingredient):
        return False
    
    if any(food in ingredient_lower for food in COMMON_FOOD_ITEMS + UNCOMMON_FOOD_ITEMS):
        return True
    
    return None

def validate_ingredients(ingredients_text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å"""
    ingredients = re.split(r'[,;\n]+', ingredients_text)
    ingredients = [ing.strip() for ing in ingredients if ing.strip()]
    
    errors = []
    warnings = []
    valid_ingredients = []
    
    for ing in ingredients:
        validation_result = is_valid_ingredient(ing)
        
        if validation_result is False:
            errors.append(f"'{ing}' –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –ø–∏—â–µ–≤–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç")
        elif validation_result is None:
            warnings.append(f"'{ing}' - –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ —Å—ä–µ–¥–æ–±–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
            valid_ingredients.append(ing)
        else:
            valid_ingredients.append(ing)
    
    if not valid_ingredients and errors:
        return None, errors
    
    return valid_ingredients, warnings + errors

def get_gemini_response(prompt):
    headers = {'Content-Type': 'application/json'}
    data = {
        "contents": [{
            "parts": [{"text": prompt}]
        }],
        "safetySettings": [
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_ONLY_HIGH"
            }
        ],
        "generationConfig": {
            "temperature": 0.9,
            "topP": 1,
            "topK": 1,
            "maxOutputTokens": 2048
        }
    }
    
    max_attempts = 3
    for attempt in range(max_attempts):
        try:
            response = requests.post(GEMINI_URL, json=data, headers=headers, timeout=30)
            
            if response.status_code != 200:
                error_msg = f"Gemini API error: {response.status_code}"
                if response.text:
                    try:
                        error_data = response.json()
                        error_msg += f" - {error_data.get('error', {}).get('message', 'Unknown error')}"
                    except:
                        error_msg += f" - {response.text[:200]}"
                raise ValueError(error_msg)
            
            response_data = response.json()
            
            if 'candidates' not in response_data or not response_data['candidates']:
                if 'promptFeedback' in response_data and 'blockReason' in response_data['promptFeedback']:
                    raise ValueError(f"–ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {response_data['promptFeedback']['blockReason']}")
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç candidates")
            
            return response_data['candidates'][0]['content']['parts'][0]['text']
            
        except requests.exceptions.Timeout:
            if attempt == max_attempts - 1:
                raise ValueError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API")
            time.sleep(2 ** attempt)
        except requests.exceptions.RequestException as e:
            if attempt == max_attempts - 1:
                raise ValueError(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Gemini API: {str(e)}")
            time.sleep(2 ** attempt)
        except Exception as e:
            if attempt == max_attempts - 1:
                raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ Gemini API: {str(e)}")
            time.sleep(2 ** attempt)

def format_error_message(message):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫—Ä–∞—Å–∏–≤—ã–π Markdown"""
    if "WARNING:" in message:
        message = message.replace("WARNING:", "## ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï")
    
    markdown_msg = f"""
<div class="error-message">
{markdown.markdown(message)}
</div>
"""
    return markdown_msg

def format_recipe_response(response):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã–π HTML"""
    # –£–ª—É—á—à–∞–µ–º Markdown –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
    response = re.sub(r'__(.+?)__', r'**\1**', response)  # –ó–∞–º–µ–Ω—è–µ–º __ –Ω–∞ **
    response = re.sub(r'^\*', '-', response, flags=re.MULTILINE)  # –ó–∞–º–µ–Ω—è–µ–º * –Ω–∞ - –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
    
    html = markdown.markdown(response)
    
    # –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å—ã
    html = html.replace('<ul>', '<ul class="recipe-list">')
    html = html.replace('<ol>', '<ol class="recipe-steps">')
    html = html.replace('<h3>', '<h3 class="recipe-subheader">')
    html = html.replace('<h2>', '<h2 class="recipe-header">')
    
    return f'<div class="recipe-container">{html}</div>'

@app.route('/health')
def health_check():
    return jsonify({"status": "healthy"}), 200

@app.route('/')
def home():
    return send_from_directory('static', 'main.html')

@app.route('/ai')
def ai_page():
    return render_template('ai-search.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        user_input = request.json.get('message', '').strip()
        force = request.json.get('force', False)
        
        if not user_input:
            error_msg = """
            ## ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞
            
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å.
            –ù–∞–ø—Ä–∏–º–µ—Ä: "–∫—É—Ä–∏—Ü–∞, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –º–æ—Ä–∫–æ–≤—å, –ª—É–∫"
            """
            return jsonify({
                'error': format_error_message(error_msg),
                'status': 'error'
            }), 400
        
        if not force:
            valid_ingredients, errors = validate_ingredients(user_input)
            
            if errors and not valid_ingredients:
                error_msg = "## ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–ø–∏—â–µ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n\n"
                error_msg += "–°–ª–µ–¥—É—é—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –ø–∏—â–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n"
                error_msg += "\n".join(f"- {error}" for error in errors)
                error_msg += "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                
                return jsonify({
                    'error': format_error_message(error_msg),
                    'status': 'error'
                }), 400
            
            if valid_ingredients:
                user_input = ', '.join(valid_ingredients)
        
        prompt = f"""
–°–æ–∑–¥–∞–π 2 —Ä–µ—Ü–µ–ø—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è: {user_input}. 

–§–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞:

### –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
[–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]

#### –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
- **–ï—Å—Ç—å:** [—Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤]
- **–ö—É–ø–∏—Ç—å:** [—Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤]

#### –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
1. [–®–∞–≥ 1]
2. [–®–∞–≥ 2]
3. [–®–∞–≥ 3]

‚è± **–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:** [–≤—Ä–µ–º—è]

üí° **–°–æ–≤–µ—Ç:** [–ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç]

---

–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –¥–∞–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å—ä–µ–¥–æ–±–Ω—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã. 
–ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ, –æ—Ç–≤–µ—Ç—å:

## ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï
–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –∏–ª–∏ –Ω–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
- [—Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤]

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–∏—â–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.
"""
        
        response = get_gemini_response(prompt)
        if not response:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")
        
        if "–í–ù–ò–ú–ê–ù–ò–ï:" in response or "WARNING:" in response:
            return jsonify({
                'error': format_error_message(response),
                'status': 'error'
            }), 400
        
        return jsonify({
            'response': format_recipe_response(response),
            'status': 'success'
        })
        
    except Exception as e:
        logger.error(f"Error in chat endpoint: {str(e)}")
        error_msg = f"""
        ## ‚ö†Ô∏è –û—à–∏–±–∫–∞
        
        –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:
        
        **{str(e)}**
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
        """
        return jsonify({
            'error': format_error_message(error_msg),
            'status': 'error'
        }), 500

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)